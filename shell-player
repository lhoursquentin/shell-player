#!/bin/sh

: "${1?No file(s) provided}"

basename="${0##*/}"
song_playing_file=~/.song-playing
paused=false

cmds_fifo=/tmp/"$basename"-commands.fifo
cmds_fifo_opened=false
player_info_fifo=/tmp/"$basename"-info.fifo
rm -f "$cmds_fifo" "$player_info_fifo"
mkfifo "$cmds_fifo" "$player_info_fifo"

default_player=mpg123
: "${player="$default_player"}"

default_loop=all
: "${loop="$default_loop"}"

cleanup_on_exit() {
  terminate_player
  rm -f "$cmds_fifo" "$player_info_fifo"
  kill 0
}

trap cleanup_on_exit EXIT

terminate_player() {
  if [ -n "$player_pid" ]; then
    pkill -P "$player_pid"
  fi
  rm -f "$song_playing_file"
}

cmd_info() {
  if "$transient_state"; then
    # FIXME this will spam the fifo while waiting for the transient state to
    # resolve
    send_cmd info
  else
    {
      if "$paused"; then
        status=Paused
      else
        status=Playing
      fi
      printf '%s: %s
Loop: %s\n' "$status" "$song_basename" "$loop" > "$player_info_fifo"
    } &
  fi
}

cmd_loop() {
  case "$loop" in
    all) loop=one ;;
    one) loop=none ;;
    none) loop=all ;;
  esac
}

cmd_next() {
  terminate_player
}

cmd_pause() {
  if "$paused"; then
    kill -CONT "$player_pid"
    pkill -CONT -P "$player_pid"
    paused=false
  else
    pkill -TSTP -P "$player_pid"
    kill -TSTP "$player_pid"
    paused=true
  fi
}

cmd_previous() {
  terminate_player
  play_song "${previous_song:-"$current_song"}"
}

cmd_quit() {
  exit 0
}

read_commands() {
  transient_state=false
  while true; do
    while read command; do
      case "$command" in
        player_end)
          return 0
          ;;
        next|previous)
          cmd_"$command"
          transient_state=true
          ;;
        *)
          cmd_"$command"
          ;;
      esac
    done <&3
    # mksh, oksh & dash fail with `cannot open /tmp/shell-player-commands.fifo:
    # Interrupted system call`, even when closing the fd beforehand, needs more
    # investigation. ksh/zsh/bash/yash work fine.
    exec 3< "$cmds_fifo"
  done
}

send_cmd() {
  printf '%s\n' "$1" > "$cmds_fifo"
}

play_song() {
  previous_song="$current_song" # only tracks "real" previously played song
  current_song="$1"
  song_basename="${current_song##*/}"
  song_basename="${song_basename%.*}"
  # For potential non blocking readers
  printf '%s\n' "$song_basename" > "$song_playing_file"
  {
    trap 'send_cmd player_end' EXIT
    # Do not quote the player variable to allow the user to pass arguments, for
    # instance `player='cvlc --play-and-exit' ./shell-player songs/*.mp3`
    $player "$current_song" > /dev/null 2>&1 < /dev/null
  } &
  player_pid="$!"

  if ! "$cmds_fifo_opened"; then
    # using an fd is required to avoid data loss on partial reads, when
    # receiving a player_end the read loop is left abruptly, later we can
    # resume where we left with this fd
    exec 3< "$cmds_fifo"
    cmds_fifo_opened=true
  fi
  read_commands
}

play_all() {
  played_once=false

  while true; do
    for song do
      while true; do
        play_song "$song"
        if [ "$loop" != one ]; then
          break
        fi
      done
    done
    if [ "$loop" != all ]; then
      break
    fi
  done
}

play_all "$@"
