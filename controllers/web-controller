#!/bin/sh

trap 'kill 0' EXIT

control_fifo=/tmp/shell-player-commands.fifo
info_fifo=/tmp/shell-player-info.fifo
server_rx_fifo=/tmp/shell-player-web-controller-server_rx.fifo
server_tx_fifo=/tmp/shell-player-web-controller-server_tx.fifo
rm -f "$server_rx_fifo" "$server_tx_fifo"
mkfifo "$server_rx_fifo" "$server_tx_fifo"
port=8080
ip="$(ip route get 1 | sed -n 's/.*src \([^ ]*\).*/\1/p')" # linux only
event_id=
wait_for_new_event=false

printf 'Access controller on: %s:%s\n' "$ip" "$port"

send_cmd() {
  printf '%s\n' "$1" > "$control_fifo"
}

dump_request_content() {
  printf 'HTTP/1.1 200 OK\r\n\r
<!DOCTYPE html>
<html>
  <head>
    <title>shell-player</title>
  </head>
  <body>
    <div>
      %s
    <div>
    <form method="POST">
      <input type="submit" name="action" value="previous">
      <input type="submit" name="action" value="next">
      <input type="submit" name="action" value="loop">
      <input type="submit" name="action" value="pause">
      <input type="submit" name="action" value="quit">
    </form>
  </body>
</html>
' "$info"
}

fetch_info() {
  found_new_event=false
  while ! "$found_new_event"; do
    info=
    while IFS= read line; do
      case "$line" in
        'event_id: '*)
          new_event_id="${line#* }"
          # should be double checked with a timestamp
          if [ "$new_event_id" != "$event_id" ]; then
            event_id="$new_event_id"
            found_new_event=true
          fi
          ;;
      esac
      info="$info<div>$line</div>"
    done < "$info_fifo"
    if ! "$wait_for_new_event"; then
      break
    fi
    sleep 0.1 # avoid overloading the player info fifo
  done
  wait_for_new_event=false
}

run_server() {
  while true; do
    nc -l -p "$port" < "$server_tx_fifo" > "$server_rx_fifo"
  done &
  server_pid="$!"
}

process_request() {
  exec 3> "$server_tx_fifo"
  exec 4< "$server_rx_fifo"

  valid=false
  content_length=0
  payload=
  while IFS= read -r line; do
    case "$line" in
      'GET / HTTP/1.1'*|'POST / HTTP/1.1'*)
        method="${line%% *}"
        valid=true
        ;;
      "$(printf '\r')")
        if "$valid"; then
          if [ "$method" = POST ]; then
            payload="$(dd bs=1 count="$content_length" status=none <&4)"
            if [ -n "$payload" ]; then
              send_cmd "${payload#action=}"
              wait_for_new_event=true
            fi
          fi
          exec 4<&-
          fetch_info
          dump_request_content
        else
          printf 'HTTP/1.1 404 Not Found\r\n\r\n'
        fi >&3
        exec 3>&-
        ;;
      Content-Length:*)
        line="${line%?}" # remove \r
        content_length="${line#* }"
        ;;
    esac
  done <&4

}

run_server
fetch_info

while process_request; do
  :
done
